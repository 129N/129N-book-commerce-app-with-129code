// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") //本番環境に影響を与えることなくmigration操作可能　本来なら別のURL
}


// model Book{

// }


//https://next-auth.js.org/v3/adapters/prisma より、　
// Account, Session, User, VerificationRequest の追加 

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refreshToken       String?  @db.Text
  accessToken        String?  @db.Text
  expiresAt          Int?     @map("expires_at")
  tokenType          String?  @map("token_type")
  scope              String?
  idToken            String?  @db.Text @map("id_token")
  sessionState       String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts      Account[]
  sessions      Session[]
  purchases     Purchase_history[]

  @@map("users")
}


  //User の履歴を追加
model Purchase_history {

id String @id @default(cuid())
userId String 
bookId String
createAt DateTime @default(now())

user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}